package bot

import (
	"context"
	"fmt"
	"gradebot/pkg/db"
	"gradebot/pkg/embedlog"
	"math"
	"math/rand"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	scholarPercent  = 100
	brokePercent    = 250
	internPercent   = 350
	juniorPercent   = 650
	middlePercent   = 850
	seniorPercent   = 920
	teamLeadPercent = 970
	ceoPercent      = 985
	papikPercent    = 995
	mayatinPercent  = 1000
)

var salariesMap = map[int]string{
	scholarPercent:  `–¢—ã —à–∫–æ–ª–æ—Ç–∞\, –∫–æ–ø–∏—à—å –Ω–∞ –æ–±–µ–¥—ã\, –ø—Ä–æ–≥–∞–µ—à—å —Ç–æ–ª—å–∫–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ü´µüòπ –ó–∞—Ä–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –º–∞–º—ã\, –ø—Ä–µ–º–∏—é \- –æ—Ç –±–∞–±—É—à–∫–∏\.`,
	brokePercent:    `–¢—ã –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π ü´µüòπ –°—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –¥–µ–Ω–µ–≥ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –µ–¥—É\, –Ω–æ —è —Ç–µ–±–µ –Ω–µ –∑–∞–≤–∏–¥—É—é :/`,
	internPercent:   `–¢–µ–±—è –≤–∑—è–ª–∏ —Å—Ç–∞–∂—ë—Ä–æ–º –≤ —Ç–≤–æ—é –ø–µ—Ä–≤—É—é IT\-–≥–∞–ª–µ—Ä—É üî• –¢–µ–ø–µ—Ä—å —Ç—ã \- –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç\! –ü—Ä–∞–≤–¥–∞\, –ø—Ä–∏–¥—ë—Ç—Å—è –∏—à–∞—á–∏—Ç—å 2 –≥–æ–¥–∞\, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ\.\.\.`,
	juniorPercent:   `–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≥–æ—Ä–¥–æ–µ –∑–≤–∞–Ω–∏–µ –¥–∂—É–Ω–∞\! üßë‚Äçüíª –¢–∞–∫–∏—Ö –∫–∞–∫ —Ç—ã \- –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ\. –£–¥–∞—á–∏ –ø—Ä–æ–±–∏—Ç—å—Å—è –Ω–∞ –•–µ–¥—Ö–∞–Ω—Ç–µ—Ä–µ :\)`,
	middlePercent:   `–¢—ã \- –º–∏–¥–ª\! ü§† –ú–æ–ª–æ–¥–µ—Ü\, –Ω–µ–º–Ω–æ–≥–∏–µ —Å—é–¥–∞ –¥–æ–±–∏—Ä–∞—é—Ç—Å—è\. –ê —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ üî•üî•üî•`,
	seniorPercent:   `–¢—ã \- —Å–µ–Ω—å–æ—Ä\! ü§ë –ú–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ 3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å\, —Ö—Ä—é—à–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ—Ä–æ–∂–µ –∏—Å–∫–∞—Ç—å –∑–∞–º–µ–Ω—É`,
	teamLeadPercent: `–¢—ã \- —Ç–∏–º–ª–∏–¥\! üë®‚Äçüíº –ú–æ–∂–µ—à—å –≤–æ–æ–±—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å\, –∞ —Å–∏–¥–µ—Ç—å –Ω–∞ —Å–æ–∑–≤–æ–Ω–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö —Ü–µ–ª—ã–π –¥–µ–Ω—å`,
	ceoPercent:      `–¢—ã \- CEO\! üòé –ü–æ–∫–∞ —ç—Ç–∏ –ª–æ—à–ø–µ–¥—ã —Ç—Ä–∞—Ç—è—Ç –Ω–µ—Ä–≤—ã –Ω–∞ –∫–æ–¥–∏–Ω–≥\, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤—Å–µ —Å–ª–∏–≤–∫–∏ —Å –∏—Ö —Ç—Ä—É–¥–æ–≤\. –í—Å–µ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã \- –ª—É—á—à–µ\, —á–µ–º –æ–Ω–∏\. –ù–µ –∑–∞–±—ã–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–º –æ–± —ç—Ç–æ–º\!`,
	papikPercent:    `–¢—ã \- –ü–∞–ø–∏–∫—è–Ω –°–µ—Ä–≥–µ–π –°–µ–¥—Ä–∞–∫–æ–≤–∏—á\, –ª–µ–≥–µ–Ω–¥–∞ –ò–¢–ú–û –∏ —Å–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –º–∏—Ä–µ\. –¢—ã –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏\, –≤—Å–µ —Ç–µ–±–µ –∑–∞–≤–∏–¥—É—é—Ç\.`,
	mayatinPercent:  `–¢—ã \- –ú–∞—è—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\! –¢—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–≤–æ–µ–≥–æ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ \- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\, –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\.`,
}

type UndefinedSong struct {
	Title  string
	FileID string
}

var undefinedSongs = []UndefinedSong{
	{Title: "üë®‚Äçü¶≥ –Ø –ü–∞–ø–∏–∫—è–Ω\n–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –æ–ª–¥!", FileID: "CQACAgIAAxkBAAMSZ_ziMUWAFmAoHVERRnASZECYR1EAAoMqAAKKY3lLl1qro2901rg2BA"},
	{Title: "üáßüá∑üáßüá∑üáßüá∑ BRAZZIL\n–¢—ã —Ç—Ä—É—à–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç –§–ò–¢–ò–ü, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ –Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–µ?ü§î", FileID: "CQACAgIAAxkBAAMeZ_ziMdVaysbZ9povh2-VSAABqND8AAJVZQACTYCBSAGrlmTsAAH9TDYE"},
	{Title: "ü§† morgenISIT\n–¢—ã –ø–æ–∑–Ω–∞–ª –≤—Å–µ —Ç—è–∂–µ—Å—Ç–∏ –ò–° –∏ —Ç–µ–ø–µ—Ä—å —Ü–µ–ª—ã–º–∏ –¥–Ω—è–º–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è —Å —Ç–∞–∫–∏–º–∏ –∂–µ —Å—Ç–∞—Ä–∏—á–∫–∞–º–∏ –≤ –æ—Ñ—Ñ—Ç–æ–ø–µ, –≤—Å–ø–æ–º–∏–Ω–∞—è –±—ã–ª–æ–µ", FileID: "CQACAgIAAxkBAAMTZ_ziMd0xgFjMfIZNVUoxgAzlxroAAhUmAAKKY4FLyQJtRjp6jck2BA"},
	{Title: "üòé BlackPapik [–ü–∞–ø–∏–Ω –¢–∞–Ω–∫]\n–¢—ã —É–≤–∞–∂–∞–µ—à—å –°–µ—Ä–≥–µ—è –°–µ–¥—Ä–∞–∫–æ–≤–∏—á–∞ –±–æ–ª—å—à–µ, —á–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ!", FileID: "CQACAgIAAxkBAAMUZ_ziMex1TFiiAAHn9x3VQKNqEcJSAAIhJgACimOBS_ujBMUBINiXNgQ"},
	{Title: "üóø ballad\n–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —è–∑—ã–∫–µ —Ñ–∞–∫—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ", FileID: "CQACAgIAAxkBAAMZZ_ziMZOLGPy9Ha_4MlvjenmztXcAArc1AAIB5-FL_XuDq8CnmlA2BA"},
	{Title: "üñê‚úåÔ∏è +7(952)09-03-02\n–ù–µ—Ç —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ 52", FileID: "CQACAgIAAxkBAAMaZ_ziMRPjf-MPtN3ZExEvOAnueAMAArZDAALJz-lJ-9xef8n3bTE2BA"},
	{Title: "üë®‚Äçüíª OOP [Nominalo]\n–¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –≤—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –±–µ–∑ —Å–Ω–∞, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—è –ª–∞–±—ã –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫. –ó–∞—Ç–æ –ø–æ—Ç–æ–º –±—É–¥–µ—à—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –û–û–ü!", FileID: "CQACAgIAAxkBAAMVZ_ziMetBWvbzfiLSyCu-6RNlSG0AAiYmAAKKY4FL-eztebHcyeo2BA"},
	{Title: "üòî Kreed\n–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ-–¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–º –≤–∞–π–±–µ. –ù–µ –ø–æ–¥—Ö–æ–¥–∏ –∫ –±–∞–ª–∫–æ–Ω–∞–º –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º –æ–∫–Ω–∞–º", FileID: "CQACAgIAAxkBAAMWZ_ziMRAox71pFkvA-1RI29O180sAAhonAAKKY4FLGx8iCoZbEmY2BA"},
	{Title: "üòçü•∞üòÆ‚Äçüí® NE ROMA\n–¢—ã —Å–∞–º—ã–π —Ç—Ä—É—à–Ω—ã–π —Ñ–∞–Ω –†–æ–º—ã!!!", FileID: "CQACAgIAAxkBAAMXZ_ziMR_Z64tpnb1UX-S4jlAHC6IAAgkrAAKMq3hJRnGZyQABhBjcNgQ"},
	{Title: "‚ò∫Ô∏èüòåüòò heronwater\n–ù–∞—Å—Ç—É–ø–∏–ª–∞ –≤–µ—Å–Ω–∞ –∏ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–ª—é–±–ª—è—Ç—å—Å—è!", FileID: "CQACAgIAAxkBAAMYZ_ziMYDbUgYdZEIK7IIoJbAYuxMAAlM2AALiFghL4VMu9ITVwxs2BA"},
	{Title: "‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π‚ù§Ô∏è‚Äçü©π fitp juice wrld\n–í—Ä–µ–º—è –≤—ã–π—Ç–∏ –Ω–∞ –±–∞–ª–∫–æ–Ω, –∑–∞–∫—É—Ä–∏—Ç—å, –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ–±–æ –≤—Å—ë–º, —á—Ç–æ –±—ã–ª–æ –∑–∞ —ç—Ç–∏ –≥–æ–¥—ã...", FileID: "CQACAgIAAxkBAAMbZ_ziMWNoqFshqo_s2KLo8JUowPIAAvNOAALBJiBLUzTze2mBAAHENgQ"},
	{Title: "üï∫üíÉ Ronimizy\n–ü–æ–ª—Ç–æ—Ä—ã –º–∏–Ω—É—Ç—ã –≤–∞–π–±–∞ –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –º–µ–∂–¥—É —Å–æ—Ç–Ω–µ–π –ª–∞–± - –≤–æ—Ç –≤—Å—ë, —á—Ç–æ —Ç–µ–±–µ —Å–≤–µ—Ç–∏—Ç –≤ —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ", FileID: "CQACAgIAAxkBAAMcZ_ziMZmNwctLX2pXSnfnT69X5c8AAq9XAAJ15nBKNGA4zqckH5w2BA"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–ö–∞–∂–µ—Ç—Å—è, —Ç–µ–±–µ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –±—ç–∫–∞–ø–∞—Ö. –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ —É–ø–∞–ª–∞ –ª–∏ –µ—â—ë –±–∞–∑–∞ –Ω–∞ –ø—Ä–æ–¥–µ?", FileID: "CQACAgIAAxkBAAMoZ_5J-6BkTYKCUtAjK_Y8-gWtsXAAAhBqAAKEnPlLivuOrk1ND6I2BA"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —Å–≤–µ—Ç–∏—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –∑–∞–Ω—è—Ç–∏–π! –ü—Ä–∞–≤–¥–∞, –∑–∞ –Ω–∏–º –ø–æ—Å–ª–µ–¥—É–µ—Ç –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω...", FileID: "CQACAgIAAxkBAAMjZ_5J-6UDE84tD3fV0Met9PaO-80AAgtqAAKEnPlLP7MOBeTmt7I2BA"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–ú–∞–∫—Å–∏–º –í–∞–ª–µ—Ä—å–µ–≤–∏—á —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ, –Ω–µ —Å–æ–≤–µ—Ç—É—é –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è –∫ –∫—É—Å—Ç–∞–º!", FileID: "CQACAgIAAxkBAAMkZ_5J-09afhCqAAHpKEVNife46VjIAAIMagAChJz5S7J1rUPi_KF4NgQ"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–∞–¥–∏—Ç—å—Å—è –ø–∏—Å–∞—Ç—å –¥–∏–ø–ª–æ–º, —Å—Ä–æ–∫–∏ —É–∂–µ –≥–æ—Ä—è—Ç!", FileID: "CQACAgIAAxkBAAMlZ_5J-yaHqnazWWOdEAABAqH27iJbAAINagAChJz5SxbigaUC0GNXNgQ"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–í—Å—è –ø—Ä–∞–≤–¥–∞ –æ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —ç—Ç–æ–π —Ç—Ä–æ–∏—Ü—ã - —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ", FileID: "CQACAgIAAxkBAAMmZ_5J-8KxhV_FYAQQMFtKqV4FKGYAAg5qAAKEnPlLZxI20ZJi1Ok2BA"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–°–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–±–µ –º–Ω–æ–≥–æ –∞–≥—Ä–µ—Å—Å–∏–∏ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—Ä–∞ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –≤ –∫–∞–ª—å—è–Ω–Ω—É—é —Å—Ö–æ–¥–∏ —Ö–∑", FileID: "CQACAgIAAxkBAAMnZ_5J-2Nvq9xoMFDKwd0f5btGbVEAAg9qAAKEnPlLyLq_WQEys4E2BA"},
	{Title: "ü§ñ–ë–æ–Ω—É—Å–Ω—ã–π –Ω–µ–π—Ä–æ—Ç—Ä–µ–∫!\n–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∫—Ä—É–ø–Ω—ã–µ –∫–æ—Å—è–∫–∏... –ü—Ä–∏–¥—ë—Ç—Å—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å", FileID: "CQACAgIAAxkBAAMiZ_5J-0IG8ypyyPEDeNzSiEfNtKIAAglqAAKEnPlLhvzbrfIpA702BA"},
	{Title: "üçæüî•üòÆ‚Äçüí® –Ø –∑–∞–∫—Ä—ã–ª UML (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ–ø!)\n–í–∑–¥–æ—Ö–Ω–∏ —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º, —Ö—É–¥—à–µ–µ —É–∂–µ –ø–æ–∑–∞–¥–∏ :)", FileID: "CQACAgIAAxkBAAMsZ_5p16mtBtMNY8oOYzpOh7LRHsIAAnZLAAJfOClJ0ll_antjt_k2BA"},
}

type BotService struct {
	embedlog.Logger
	db db.DB
}

func NewBotService(logger embedlog.Logger, db db.DB) *BotService {
	return &BotService{Logger: logger, db: db}
}

func (bs BotService) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message != nil && update.Message.Audio != nil {
		println(update.Message.Audio.FileName, "|", update.Message.Audio.FileID)
	}
	if update.InlineQuery != nil && update.InlineQuery.From != nil {
		if err := bs.answerInlineQuery(ctx, b, update); err != nil {
			bs.Errorf("%v", err)
		}
		return
	}
	return
}

func (bs BotService) answerInlineQuery(ctx context.Context, b *bot.Bot, update *models.Update) error {

	var salary int
	var ending string
	percents := rand.Intn(1000)
	switch {
	case percents <= scholarPercent:
		salary = rand.Intn(1000)
		ending = salariesMap[scholarPercent]
		break
	case percents <= brokePercent:
		salary = 10000 + rand.Intn(20000)
		ending = salariesMap[brokePercent]
		break
	case percents <= internPercent:
		salary = 20000 + (rand.Intn(25000)/1000)*1000
		ending = salariesMap[internPercent]
		break
	case percents <= juniorPercent:
		salary = 40000 + (rand.Intn(40000)/1000)*1000
		ending = salariesMap[juniorPercent]
		break
	case percents <= middlePercent:
		salary = 80000 + (rand.Intn(200000)/5000)*5000
		ending = salariesMap[middlePercent]
		break
	case percents <= seniorPercent:
		salary = 280000 + (rand.Intn(320000)/10000)*10000
		ending = salariesMap[seniorPercent]
		break
	case percents <= teamLeadPercent:
		salary = 600000 + (rand.Intn(500000)/50000)*50000
		ending = salariesMap[teamLeadPercent]
		break
	case percents <= ceoPercent:
		salary = 1100000 + (rand.Intn(10000000)/100000)*100000
		ending = salariesMap[ceoPercent]
		break
	case percents <= papikPercent:
		ending = salariesMap[papikPercent]
		salary = math.MaxInt32
		break
	case percents <= mayatinPercent:
		ending = salariesMap[mayatinPercent]
		salary = math.MaxInt32
		break
	}

	username := update.InlineQuery.From.Username
	username = strings.ReplaceAll(username, "_", `\_`)
	username = strings.ReplaceAll(username, "!", `\!`)
	username = strings.ReplaceAll(username, ".", `\.`)
	username = strings.ReplaceAll(username, ",", `\,`)
	username = strings.ReplaceAll(username, `-`, `\-`)
	username = strings.ReplaceAll(username, `=`, `\=`)
	username = strings.ReplaceAll(username, `#`, `\#`)
	username = strings.ReplaceAll(username, `+`, `\+`)
	username = strings.ReplaceAll(username, `(`, `\(`)
	username = strings.ReplaceAll(username, `)`, `\)`)
	username = strings.ReplaceAll(username, `*`, `\*`)
	username = strings.ReplaceAll(username, `~`, `\~`)
	username = strings.ReplaceAll(username, `[`, `\[`)
	username = strings.ReplaceAll(username, `]`, `\]`)

	// send answer to the query
	results := []models.InlineQueryResult{
		&models.InlineQueryResultArticle{
			ID:           "1",
			Title:        "–¢–≤–æ—è –∑–ø",
			ThumbnailURL: "https://cdn.vectorstock.com/i/500p/79/20/emoticon-with-dollars-vector-2287920.jpg",
			ReplyMarkup: models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						models.InlineKeyboardButton{
							Text:                         "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é",
							SwitchInlineQueryCurrentChat: " ",
						},
					},
				}},
			InputMessageContent: &models.InputTextMessageContent{
				MessageText: fmt.Sprintf("–ó–∞—Ä–ø–ª–∞—Ç–∞ @%s: ||%d‚ÇΩ\n%s||", username, salary, ending),
				ParseMode:   models.ParseModeMarkdown,
			}},
		&models.InlineQueryResultArticle{
			ID:           "2",
			Title:        "–ö—Ç–æ —Ç—ã –∏–∑ –ø–µ—Å–µ–Ω Undefined?",
			ThumbnailURL: "https://memi.klev.club/uploads/posts/2024-12/memi-klev-club-ngvi-p-memi-s-devushkoi-v-naushnikakh-1.jpg",
			ReplyMarkup: models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						models.InlineKeyboardButton{
							Text:         "–£–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é",
							CallbackData: "song",
						},
					},
				}},
			InputMessageContent: &models.InputTextMessageContent{
				MessageText: "–ù–∞–∂–º–∏ –∏ —É–∑–Ω–∞–µ—à—å!",
			},
		},
	}

	_, err := b.AnswerInlineQuery(ctx, &bot.AnswerInlineQueryParams{
		//Button: &models.InlineQueryResultsButton{
		//	Text:           "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
		//	StartParameter: "1",
		//},
		InlineQueryID: update.InlineQuery.ID,
		Results:       results,
		IsPersonal:    true,
		CacheTime:     1,
	})

	return err
}

func FindUndefinedSong(ctx context.Context, b *bot.Bot, update *models.Update) {
	selectedSong := undefinedSongs[rand.Intn(len(undefinedSongs))]
	b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		InlineMessageID: update.CallbackQuery.InlineMessageID,
		Media: &models.InputMediaAudio{
			Media:   selectedSong.FileID,
			Caption: selectedSong.Title,
		},
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					models.InlineKeyboardButton{
						Text:                         "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é",
						SwitchInlineQueryCurrentChat: " ",
					},
				},
			}},
	})
}
