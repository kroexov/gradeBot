package bot

import (
	"context"
	"fmt"
	"gradebot/pkg/db"
	"gradebot/pkg/embedlog"
	"math"
	"math/rand"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	scholarPercent  = 100
	brokePercent    = 250
	internPercent   = 350
	juniorPercent   = 650
	middlePercent   = 850
	seniorPercent   = 950
	teamLeadPercent = 980
	ceoPercent      = 995
	papikPercent    = 1000
)

var salariesMap = map[int]string{
	scholarPercent:  `–¢—ã —à–∫–æ–ª–æ—Ç–∞\, –∫–æ–ø–∏—à—å –Ω–∞ –æ–±–µ–¥—ã\, –ø—Ä–æ–≥–∞–µ—à—å —Ç–æ–ª—å–∫–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ü´µüòπ –ó–∞—Ä–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –º–∞–º—ã\, –ø—Ä–µ–º–∏—é \- –æ—Ç –±–∞–±—É—à–∫–∏\.`,
	brokePercent:    `–¢—ã –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π ü´µüòπ –°—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –¥–µ–Ω–µ–≥ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –µ–¥—É\, –Ω–æ —è —Ç–µ–±–µ –Ω–µ –∑–∞–≤–∏–¥—É—é :/`,
	internPercent:   `–¢–µ–±—è –≤–∑—è–ª–∏ —Å—Ç–∞–∂—ë—Ä–æ–º –≤ —Ç–≤–æ—é –ø–µ—Ä–≤—É—é IT\-–≥–∞–ª–µ—Ä—É üî• –¢–µ–ø–µ—Ä—å —Ç—ã \- –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç\! –ü—Ä–∞–≤–¥–∞\, –ø—Ä–∏–¥—ë—Ç—Å—è –∏—à–∞—á–∏—Ç—å 2 –≥–æ–¥–∞\, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ\.\.\.`,
	juniorPercent:   `–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≥–æ—Ä–¥–æ–µ –∑–≤–∞–Ω–∏–µ –¥–∂—É–Ω–∞\! üßë‚Äçüíª –¢–∞–∫–∏—Ö –∫–∞–∫ —Ç—ã \- –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ\. –£–¥–∞—á–∏ –ø—Ä–æ–±–∏—Ç—å—Å—è –Ω–∞ –•–µ–¥—Ö–∞–Ω—Ç–µ—Ä–µ :\)`,
	middlePercent:   `–¢—ã \- –º–∏–¥–ª\! ü§† –ú–æ–ª–æ–¥–µ—Ü\, –Ω–µ–º–Ω–æ–≥–∏–µ —Å—é–¥–∞ –¥–æ–±–∏—Ä–∞—é—Ç—Å—è\. –ê —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ üî•üî•üî•`,
	seniorPercent:   `–¢—ã \- —Å–µ–Ω—å–æ—Ä\! ü§ë –ú–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ 3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å\, —Ö—Ä—é—à–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ—Ä–æ–∂–µ –∏—Å–∫–∞—Ç—å –∑–∞–º–µ–Ω—É`,
	teamLeadPercent: `–¢—ã \- —Ç–∏–º–ª–∏–¥\! üë®‚Äçüíº –ú–æ–∂–µ—à—å –≤–æ–æ–±—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å\, –∞ —Å–∏–¥–µ—Ç—å –Ω–∞ —Å–æ–∑–≤–æ–Ω–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö —Ü–µ–ª—ã–π –¥–µ–Ω—å`,
	ceoPercent:      `–¢—ã \- CEO\! üòé –ü–æ–∫–∞ —ç—Ç–∏ –ª–æ—à–ø–µ–¥—ã —Ç—Ä–∞—Ç—è—Ç –Ω–µ—Ä–≤—ã –Ω–∞ –∫–æ–¥–∏–Ω–≥\, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤—Å–µ —Å–ª–∏–≤–∫–∏ —Å –∏—Ö —Ç—Ä—É–¥–æ–≤\. –í—Å–µ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã \- –ª—É—á—à–µ\, —á–µ–º –æ–Ω–∏\. –ù–µ –∑–∞–±—ã–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–º –æ–± —ç—Ç–æ–º\!`,
	papikPercent:    `–¢—ã \- –ü–∞–ø–∏–∫—è–Ω –°–µ—Ä–≥–µ–π –°–µ–¥—Ä–∞–∫–æ–≤–∏—á\, –ª–µ–≥–µ–Ω–¥–∞ –ò–¢–ú–û –∏ —Å–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –º–∏—Ä–µ\. –¢—ã –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏\, –≤—Å–µ —Ç–µ–±–µ –∑–∞–≤–∏–¥—É—é—Ç\.`,
}

type BotService struct {
	embedlog.Logger
	db db.DB
}

func NewBotService(logger embedlog.Logger, db db.DB) *BotService {
	return &BotService{Logger: logger, db: db}
}

func (bs BotService) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.InlineQuery != nil && update.InlineQuery.From != nil {
		if err := bs.answerInlineQuery(ctx, b, update); err != nil {
			bs.Errorf("%v", err)
		}
		return
	}
	return
}

func (bs BotService) answerInlineQuery(ctx context.Context, b *bot.Bot, update *models.Update) error {

	var salary int
	var ending string
	percents := rand.Intn(1000)
	switch {
	case percents <= scholarPercent:
		salary = rand.Intn(1000)
		ending = salariesMap[scholarPercent]
		break
	case percents <= brokePercent:
		salary = 10000 + rand.Intn(20000)
		ending = salariesMap[brokePercent]
		break
	case percents <= internPercent:
		salary = 20000 + (rand.Intn(25000)/1000)*1000
		ending = salariesMap[internPercent]
		break
	case percents <= juniorPercent:
		salary = 40000 + (rand.Intn(40000)/1000)*1000
		ending = salariesMap[juniorPercent]
		break
	case percents <= middlePercent:
		salary = 80000 + (rand.Intn(200000)/5000)*5000
		ending = salariesMap[middlePercent]
		break
	case percents <= seniorPercent:
		salary = 280000 + (rand.Intn(320000)/10000)*10000
		ending = salariesMap[seniorPercent]
		break
	case percents <= teamLeadPercent:
		salary = 600000 + (rand.Intn(500000)/50000)*50000
		ending = salariesMap[teamLeadPercent]
		break
	case percents <= ceoPercent:
		salary = 1100000 + (rand.Intn(10000000)/100000)*100000
		ending = salariesMap[ceoPercent]
		break
	case percents <= papikPercent:
		ending = salariesMap[papikPercent]
		salary = math.MaxInt32
		break
	}

	// send answer to the query
	results := []models.InlineQueryResult{
		&models.InlineQueryResultArticle{
			ID:           "1",
			Title:        "–¢–≤–æ—è –∑–ø",
			ThumbnailURL: "https://cdn.vectorstock.com/i/500p/79/20/emoticon-with-dollars-vector-2287920.jpg",
			ReplyMarkup: models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						models.InlineKeyboardButton{
							Text:                         "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é",
							SwitchInlineQueryCurrentChat: " ",
						},
					},
				}},
			InputMessageContent: &models.InputTextMessageContent{
				MessageText: fmt.Sprintf("–ó–∞—Ä–ø–ª–∞—Ç–∞ @%s: ||%d‚ÇΩ\n%s||", update.InlineQuery.From.Username, salary, ending),
				ParseMode:   models.ParseModeMarkdown,
			}},
	}

	_, err := b.AnswerInlineQuery(ctx, &bot.AnswerInlineQueryParams{
		//Button: &models.InlineQueryResultsButton{
		//	Text:           "–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
		//	StartParameter: "1",
		//},
		InlineQueryID: update.InlineQuery.ID,
		Results:       results,
		IsPersonal:    true,
		CacheTime:     1,
	})

	return err
}
